<?php

/**
 * Ladakh swagger
 * Documentation for the ladakh platform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\Business;
use App\Models\Document;
use App\Http\Utils\Utils;
use App\Models\Category;
use App\Models\BusinessCategory;
use App\Models\BusinessDocument;

class BusinessApiImpl extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation allBusinesss
     *
     * Returns a list of documents..
     *
     *
     * @return Http response
     */
    public function allBusinesses()
    {
        try {
              $input = Request::all();

                if (!isset($input['limit'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
                }
                $limit = $input['limit'];

                if (!isset($input['page'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
                }
                $page = $input['page'];

                //not path params validation

                $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

                if ($limit == 0) {
                    $limit = 1;
                }

                $page = isset($input['page']) ? intval( $input['page'] ) : 1;

                if( $page == 0 ) {
                    $page = 1;
                }

                $skip = ($page-1) * $limit;

                $query = new Business();
                if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                    $orArray = array();
                    $fields = ['title'];
                    // Put search in lowercase
                    $searchValue = strtolower($input['searchValue']);

                    // Extract search fields
                    if( isset($input['searchFields']) ) {
                        $fields = explode(',', $input['searchFields']);
                    }

                    // Iterate on fields to create the query
                    $query = $query->where(function($query) use($fields, $searchValue) {
                        foreach( $fields as $field ) {
                            $query->orWhere($field, 'like', "%" . $searchValue ."%");
                        }
                    });
                }
                if (isset($input['status'])) {
                    if ($input['status'] == 'registering') {
                        $query = $query->where('status', 'registering')->where('business_category_id', '!=', null);
                    } elseif ($input['status'] == 'waiting_registering') {
                        $query = $query->where('status', 'registering')->where('business_category_id', null);
                    } else {
                        $status = explode(',', $input['status']) ;
                        $query = $query->whereIn('status', $status);
                    }
                }
                if (isset($input['city'])) {
                    $query = $query->where('city', $input['city']);
                }
                if (isset($input['business_category_id'])) {
                    $query = $query->where('business_category_id', $input['business_category_id']);
                }  
                if (isset($input['business_subcategory_id'])) {
                    $query = $query->where('business_subcategory_id', $input['business_subcategory_id']);
                } 
                if (isset($input['created_at'])) {
                    $query = $query->whereDate('created_at', $input['created_at']);
                } 
                // Get total elements in DB
                $total = $query->count();


                $totalPages = ceil( $total / $limit );

                if ($page > $totalPages) {
                    return response()->json([
                    'limit' => $limit,
                    'page' => $page,
                    'pages' => $totalPages,
                    'total' => $total,
                    'rows' => []
                    ]);
                }


                $sortBy = 'created_at';
                $sortOrder = 'asc';

                // Generate sort query
                if( isset($input['sortField']) ) {
                    $data = explode('=', $input['sortField']);
                    if( count($data) == 2 ) {
                        $sortBy = $data[0];
                        $sortOrder = $data[1];
                    }
                }

                $businesses = $query->with('thumbnail', 'banner', 'category')->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
                if (isset($input['excerpt'])) {
                    foreach($businesses as $business) {
                        $business->content = $business->excerpt(150);
                    }
                }
                
                return response()->json([
                'limit' => $limit,
                'page' => $page,
                'pages' => $totalPages,
                'total' => $total,
                'rows' => $businesses
                ]);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation createBusiness
     *
     * Creates a document.
     *
     *
     * @return Http response
     */
    public function createBusiness()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => array('admin'),
            ]);
            if( $decodedToken ) {
                $body = json_decode( Request::instance()->getContent() );

                $business = new Business();
                foreach( $body as $key => $value ) {
                    if ($key !== 'thumbnail' && $key !== 'images' && $key !== 'banner') {
                        $business->{$key} = $value;
                    }
                }
               // $business->posted_at = \Carbon\Carbon::now()->format('Y-m-d H:i:s');
                $business->author_id = $decodedToken->userId;
                if (isset($body->images)) {
                    $imagesToAttach = array();
                    foreach($body->images as $docImage) {
                        if ( isset($docImage->id) ) {
                            $image = Document::find($docImage->id);
                        } else {
                            $image = new Document();
                            foreach( $docImage as $key => $value ) {
                                $image->{$key} = $value;
                            }
                            $image->save();

                        }
                        array_push($imagesToAttach, $image->id);
                    }
                }
                if (isset($body->thumbnail)) {
                    if ( isset($body->thumbnail->id) ) {
                        $thumbnail = Document::find($body->thumbnail->id);
                    } else {
                        $thumbnail = new Document();
                        foreach( $body->thumbnail as $key => $value ) {
                            $thumbnail->{$key} = $value;
                        }
                        $thumbnail->save();
                    }
                    $business->thumbnail()->associate($thumbnail);
                }
                if (isset($body->banner)) {
                    if ( isset($body->banner->id) ) {
                        $banner = Document::find($body->banner->id);
                    } else {
                        $banner = new Document();
                        foreach( $body->banner as $key => $value ) {
                            $banner->{$key} = $value;
                        }
                        $banner->save();
                    }
                    $business->banner()->associate($banner);
                }
                $business->save();
                if (isset($imagesToAttach) && count($imagesToAttach) > 0) {
                    $business->images()->attach($imagesToAttach);
                }
              
                
               
                // $document = Document::create((array)$body);
                return response()->json($business);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation deleteBusiness
     *
     * Deletes a user by ID.
     *
     * @param string $id Business ID (required)
     *
     * @return Http response
     */
    public function deleteBusiness($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();

                $document = Business::find($id);

                if( !$document ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                $document->delete();

                return response()->json([
                'success' => true
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation getBusiness
     *
     * Gets a doc by ID.
     *
     * @param string $id Business ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function getBusiness($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin', 'vendor', 'photographer', 'user','manager']
                ]);
    
            if( $decodedToken ) {
                $userIdToFind = $id;

                if ($userIdToFind == 'mine' || $userIdToFind == 'me') {
                    $userIdToFind = $decodedToken->userId;
                }
                $query = Business::where('id', $userIdToFind)->with('thumbnail', 'banner', 'category');
                $document = $query->first();
    
                if( !$document ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
    
                return response()->json($document);
            } else {

            }
     
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation updateBusiness
     *
     * Updates a Business by ID.
     *
     * @param string $id Business ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function updateBusiness($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin', 'user', 'vendor', 'manager']]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );
                
                $userIdToFind = $id;

                if ($decodedToken->role !== 'admin'  || $userIdToFind == 'mine' || $userIdToFind == 'me') {
                    $userIdToFind = $decodedToken->userId;
                }
                // Search in DB
                $document = Business::find($userIdToFind);

                if( !$document ) { // Stop request if the user has not been found
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
                unset($body->created_at);
                unset($body->updated_at);

                foreach( $body as $key => $value ) {
                    if ($key !== 'thumbnail' && $key !== 'banner' && $key !== 'category') {
                        $document->{$key} = $value;
                    }
                }
                if (isset($body->thumbnail)) {
                    if ( isset($body->thumbnail->id) && $body->thumbnail->id != $document->thumbnail_id ) {
                        $thumbnail = Document::find($body->thumbnail->id);
                        $document->thumbnail()->associate($thumbnail);
                    }
                }
                if (isset($body->banner)) {
                    if ( isset($body->banner->id) && $body->banner->id != $document->banner_id ) {
                        $banner = Document::find($body->banner->id);
                        $document->banner()->associate($banner);
                    } 
                }
                if (isset($body->category)) {
                    if ( isset($body->category->id) && $body->category->id != $document->category_id ) {
                        $category = BusinessCategory::find($body->category->id);
                        $document->banner()->associate($category);
                    }
                }
            
                // detach
                $document->save();
              
                return response()->json($document);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation updateBusinessStatus
     *
     * Updates a Business by ID.
     *
     * @param string $id Business ID. (required)
     *
     * @return Http response
     */
    public function updateBusinessStatus($id)
    {
        $input = Request::all();
        if (!isset($input['status'])) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => 'send status'
                ], 500);
        }
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin', 'manager', 'vendor']]);
    
            if( $decodedToken ) {
                // Search in DB
                $document = Business::find($id);
                $document->status = $input['status'];
                $document->save();
                // send email to user
                try {
                    if ($input['status'] == 'registering') {
                        $title = 'Account approval';
                        $content = 'Your account are now approved, you can now log in and continue to choose your business type.';
                    }else if ($input['status'] == 'waiting_form') {
                        $title = 'Registering approval';
                        $content = 'Your registration are now approved, you can now log in and continue to fill your business detail.';
                    } else {
                        //Default
                        $title = 'Account status';
                        $content = 'Your business account is now '. $input['status'];
                    }
                    if (isset($title)) {
                        Utils::sendEmail($document->email, $title, $content);
                    }
                } catch (Exception $e) {
                    return response()->json([
                        'error' => 'Unexpected error',
                        'stack' => json_encode($e)
                        ], 500);
                }
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => json_encode($e)
                ], 500);
        }
    }
        /**
     * Operation approveBusiness
     *
     * Approve business.
     *
     * @param string $id Business ID. (required)
     *
     * @return Http response
     */
    public function approveBusiness($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin', 'manager', 'vendor']]);
            
            if( $decodedToken ) {
                // Search in DB
                $document = Business::find($id);
                if ($document->status === 'new') {
                    $status = 'registering';
                } else if ($document->status === 'registering') {
                    $status = 'waiting_form';
                } else if ($document->status === 'under_review') {
                    $status = 'waiting_payment';
                }
                if (!isset($status)) {
                    $unauthorized = Utils::notFoundMessage();
                    return response()->json($unauthorized->message, $unauthorized->status);
                }
                $document->status = $status;
                $document->save();
                // send email to user
                try {
                    if ($document->status == 'registering') {
                        $title = 'Account approval';
                        $content = 'Your account are now approved, you can now log in and continue to choose your business type.';
                    }else if ($document->status== 'waiting_form') {
                        $title = 'Registering approval';
                        $content = 'Your registration are now approved, you can now log in and continue to fill your business detail.';
                    } else {
                        //Default
                        $title = 'Account status';
                        $content = 'Your business account is now '. $input['status'];
                    }
                    if (isset($title)) {
                        Utils::sendEmail($document->email, $title, $content);
                    }
                } catch (Exception $e) {
                    return response()->json([
                        'error' => 'Unexpected error',
                        'stack' => json_encode($e)
                        ], 500);
                }
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => json_encode($e)
                ], 500);
        }
    }
    /**
     * Operation rejectBusiness
     *
     * Reject business.
     *
     * @param string $id Business ID. (required)
     *
     * @return Http response
     */
    public function rejectBusiness($id)
    {
        $input = Request::all();
        if (!isset($input['rejectedReason'])) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => 'rejectedReason missing'
                ], 500);
        }
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin', 'manager', 'vendor']]);
            if( $decodedToken ) {
                // Search in DB
                $document = Business::find($id);

                $document->status = 'rejected';
                $document->rejectedReason = $input['rejectedReason'];
                $document->save();
                // send email to user
                try {
                    $title = 'Account rejected';
                    $content = 'Your account are now rejected, with a reason: ' . $document->rejectedReason ;
                    if (isset($title)) {
                        Utils::sendEmail($document->email, $title, $content);
                    }
                } catch (Exception $e) {
                    $unauthorized = Utils::notFoundMessage();
                    return response()->json($unauthorized->message, $unauthorized->status);
                }
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            $unauthorized = Utils::notFoundMessage();
            return response()->json($unauthorized->message, $unauthorized->status);
        }
    }
    /**
     * Operation statBusiness
     *
     * business stats.
     *
     *
     * @return Http response
     */
    public function statBusiness()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin', 'manager', 'vendor','user']]);
            if( $decodedToken ) {
               $new = Business::where('status', 'new')->count();
               $all = Business::count();
               $waiting_registering = Business::where('status', 'new')->where('business_category_id', null)->count();
               $registering = Business::where('status', 'registering')->where('business_category_id', '!=', null)->count();
               $waiting_form = Business::where('status', 'waiting_form')->count();
               $under_review = Business::where('status', 'under_review')->count();
               $waiting_payment = Business::where('status', 'waiting_payment')->count();
               $ignoring_guidelines = Business::where('status', 'ignoring_guidelines')->count();
               $document_missing = Business::where('status', 'document_missing')->count();
               $valid = Business::where('status', 'valid')->count();
               // photographer
               $photographer = Business::where('status', 'valid')->where('business_category_id', 9)->count();
               $rejected = Business::where('status', 'rejected')->count();
               return response()->json(
                   compact(
                       'all',
                       'new',
                       'waiting_registering', 
                       'registering', 
                        'waiting_form',
                        'under_review',
                        'waiting_payment',
                        'ignoring_guidelines',
                        'document_missing',
                        'valid',
                        'rejected',
                        'photographer'
                    )
                );
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            $unauthorized = Utils::notFoundMessage();
            return response()->json($unauthorized->message, $unauthorized->status);
        }
    }
    /**
     * Operation uploadAjaxFile
     *
     * Upload a file from ajax.
     *
     * @param string $id Business ID. (required)
     *
     * @return Http response
     */
    public function uploadAjaxFileBusiness($id)
    {
        $input = Request::all();
        //not path params validation
        $file_data = $input['file_data'];
        $currentUser = session('userData');
        if (!isset($currentUser)) {
            return response()->json([
                'error' => 'You are not connected'
            ]);
        }
        $file_id = $input['fileId'];
        $filename = Utils::cleanString($file_id);
     
        $path = 'business/banner/' . $currentUser->id ;
        $result = Utils::uploadFile( $file_data , $path, $filename, 'banner', []);
        
        if( $result == null ) {
            return response()->json([
            'success' => false,
            'error' => 'error on uploading file'
            ]);
        }
       
        $result['businessId'] = $currentUser->id ;
        // create
        $doc = Document::create($result);
        $business = Business::find($currentUser->id);
        $business->banners()->attach($doc);
        return response()->json([
            'success' => true,
            'document' => $doc
        ]);
        $data = [
            'error' => '',
            'initialPreview' => [],
            'initialPreviewConfig' => [],
            'initialPreviewThumbTags' => [],
            'appand' => false
        ];

    }
 
}
