<?php

/**
 * Ladakh swagger
 * Documentation for the ladakh platform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\BusinessTransfert;
use App\Http\Utils\Utils;

class BusinessTransfertApiImpl extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation allBusinessTransferts
     *
     * Returns a list of documents..
     *
     *
     * @return Http response
     */
    public function allBusinessTransferts()
    {
        try {
            $input = Request::all();

              if (!isset($input['limit'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
              }
              $limit = $input['limit'];

              if (!isset($input['page'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
              }
              $page = $input['page'];

              //not path params validation

              $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

              if ($limit == 0) {
                  $limit = 1;
              }

              $page = isset($input['page']) ? intval( $input['page'] ) : 1;

              if( $page == 0 ) {
                  $page = 1;
              }

              $skip = ($page-1) * $limit;

              $query = new BusinessTransfert();
              if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                  $orArray = array();
                  $fields = ['name'];
                  // Put search in lowercase
                  $searchValue = strtolower($input['searchValue']);

                  // Extract search fields
                  if( isset($input['searchFields']) ) {
                      $fields = explode(',', $input['searchFields']);
                  }

                  // Iterate on fields to create the query
                  $query = $query->where(function($query) use($fields, $searchValue) {
                      foreach( $fields as $field ) {
                          $query->orWhere($field, 'like', "%" . $searchValue ."%");
                      }
                  });
              }
              if( isset($input['businessId']) && strlen($input['businessId']) > 0  ) {
                  $query->where('businessId', $input['businessId']);
              }
              // Get total elements in DB
              $total = $query->count();


              $totalPages = ceil( $total / $limit );

              if ($page > $totalPages) {
                  return response()->json([
                  'limit' => $limit,
                  'page' => $page,
                  'pages' => $totalPages,
                  'total' => $total,
                  'rows' => []
                  ]);
              }


              $sortBy = 'created_at';
              $sortOrder = 'asc';

              // Generate sort query
              if( isset($input['sortField']) ) {
                  $data = explode('=', $input['sortField']);
                  if( count($data) == 2 ) {
                      $sortBy = $data[0];
                      $sortOrder = $data[1];
                  }
              }

              $docs = $query->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
              if (isset($input['excerpt'])) {
                  foreach($docs as $boption) {
                      $boption->content = $boption->excerpt(150);
                  }
              }
              
              return response()->json([
              'limit' => $limit,
              'page' => $page,
              'pages' => $totalPages,
              'total' => $total,
              'rows' => $docs
              ]);
      } catch (Exception $e) {
          return response()->json([
          'error' => 'Unexpected error',
          'stack' => json_encode(e)
          ], 500);
      }
    }

     /**
     * Operation deleteBusinessTransfert
     *
     * Deletes a user by ID.
     *
     * @param string $id BusinessTransfert ID (required)
     *
     * @return Http response
     */
    public function deleteBusinessTransfert($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();

                $document = BusinessTransfert::find($id);

                if( !$document ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                $document->delete();

                return response()->json([
                'success' => true
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation getBusinessTransfert
     *
     * Gets a doc by ID.
     *
     * @param string $id BusinessTransfert ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function getBusinessTransfert($id)
    {
        try {
            $query = BusinessTransfert::where('id', $id)->with('thumbnail', 'banner', 'images');
            $document = $query->first();

            if( !$document ) {
                $notFound = Utils::notFoundMessage();
                return response()->json($notFound->message, $notFound->status);
            }

            return response()->json($document);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation updateBusinessTransfert
     *
     * Updates a BusinessTransfert by ID.
     *
     * @param string $id BusinessTransfert ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function updateBusinessTransfert($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );

                // Search in DB
                $document = BusinessTransfert::find($id);

                if( !$document ) { // Stop request if the user has not been found
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
                unset($body->created_at);
                unset($body->updated_at);

                $document->save();
       
                return response()->json($document);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }


    /**
     * Operation approveBusinessTransfert
     *
     * Approve business.
     *
     * @param string $id BusinessTransfert ID. (required)
     *
     * @return Http response
     */
    public function approveBusinessTransfert($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin']]);
            
            if( $decodedToken ) {
                // Search in DB
                $document = BusinessTransfert::find($id);
                $document->status = 'valid';
                $document->save();
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => json_encode($e)
                ], 500);
        }
    }
    /**
     * Operation rejectBusinessTransfert
     *
     * Reject business.
     *
     * @param string $id BusinessTransfert ID. (required)
     *
     * @return Http response
     */
    public function rejectBusinessTransfert($id)
    {
        $input = Request::all();
        if (!isset($input['refusedReason'])) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => 'refusedReason missing'
                ], 500);
        }
        try {
            $decodedToken = Utils::isAuthorized((array)[
                'role' => ['admin']]);
            
            if( $decodedToken ) {
                // Search in DB
                $document = BusinessTransfert::find($id);
                $document->status = 'refused';
                $document->refusedReason = $input['refusedReason'];
                $document->save();
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }

        } catch (Exception $e) {
            return response()->json([
                'error' => 'Unexpected error',
                'stack' => json_encode($e)
                ], 500);
        }
    }
}
