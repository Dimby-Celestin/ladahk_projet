<?php

/**
 * Ladakh swagger
 * Documentation for the ladakh platform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\Gallery;
use App\Models\Document;
use App\Http\Utils\Utils;
use App\Models\GalleryCategory;

class GalleryApiImpl extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation allGalleries
     *
     * Returns a list of documents..
     *
     *
     * @return Http response
     */
    public function allGalleries()
    {
        try {
              $input = Request::all();

                if (!isset($input['limit'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
                }
                $limit = $input['limit'];

                if (!isset($input['page'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
                }
                $page = $input['page'];

                //not path params validation

                $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

                if ($limit == 0) {
                    $limit = 1;
                }

                $page = isset($input['page']) ? intval( $input['page'] ) : 1;

                if( $page == 0 ) {
                    $page = 1;
                }

                $skip = ($page-1) * $limit;

                $query = new Gallery();
                if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                    $orArray = array();
                    $fields = ['title'];
                    // Put search in lowercase
                    $searchValue = strtolower($input['searchValue']);

                    // Extract search fields
                    if( isset($input['searchFields']) ) {
                        $fields = explode(',', $input['searchFields']);
                    }

                    // Iterate on fields to create the query
                    $query = $query->where(function($query) use($fields, $searchValue) {
                        foreach( $fields as $field ) {
                            $query->orWhere($field, 'like', "%" . $searchValue ."%");
                        }
                    });
                }
       
                // Get total elements in DB
                $total = $query->count();


                $totalPages = ceil( $total / $limit );

                if ($page > $totalPages) {
                    return response()->json([
                    'limit' => $limit,
                    'page' => $page,
                    'pages' => $totalPages,
                    'total' => $total,
                    'rows' => []
                    ]);
                }


                $sortBy = 'created_at';
                $sortOrder = 'asc';

                // Generate sort query
                if( isset($input['sortField']) ) {
                    $data = explode('=', $input['sortField']);
                    if( count($data) == 2 ) {
                        $sortBy = $data[0];
                        $sortOrder = $data[1];
                    }
                }

                $docs = $query->with('document', 'author')->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
                
                return response()->json([
                'limit' => $limit,
                'page' => $page,
                'pages' => $totalPages,
                'total' => $total,
                'rows' => $docs
                ]);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation createGallery
     *
     * Creates a document.
     *
     *
     * @return Http response
     */
    public function createGallery()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => array('admin'),
            ]);
            if( $decodedToken ) {
                $body = json_decode( Request::instance()->getContent() );

                $boption = new Gallery();
                foreach( $body as $key => $value ) {
                        $boption->{$key} = $value;
                }
                $boption->save();
                return response()->json($boption);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation deleteGallery
     *
     * Deletes a user by ID.
     *
     * @param string $id Gallery ID (required)
     *
     * @return Http response
     */
    public function deleteGallery($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();

                $document = Gallery::find($id);

                if( !$document ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                $document->delete();

                return response()->json([
                'success' => true
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation getGallery
     *
     * Gets a doc by ID.
     *
     * @param string $id Gallery ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function getGallery($id)
    {
        try {
            $query = Gallery::where('id', $id)->with('thumbnail', 'banner', 'images');
            $document = $query->first();

            if( !$document ) {
                $notFound = Utils::notFoundMessage();
                return response()->json($notFound->message, $notFound->status);
            }

            return response()->json($document);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation updateGallery
     *
     * Updates a Gallery by ID.
     *
     * @param string $id Gallery ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function updateGallery($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );

                // Search in DB
                $document = Gallery::find($id);

                if( !$document ) { // Stop request if the user has not been found
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
                unset($body->created_at);
                unset($body->updated_at);

                foreach( $body as $key => $value ) {
                    if ($key !== 'thumbnail' && $key !== 'images' && $key !== 'banner') {
                        $document->{$key} = $value;
                    }
                }
                if (isset($body->thumbnail)) {
                    if ( isset($body->thumbnail->id) ) {
                        $thumbnail = Document::find($body->thumbnail->id);
                    } else {
                        $thumbnail = new Document();
                        foreach( $body->thumbnail as $key => $value ) {
                            $thumbnail->{$key} = $value;
                        }
                        $thumbnail->save();
                    }
                    $document->thumbnail()->associate($thumbnail);
                }
                if (isset($body->banner)) {
                    if ( isset($body->banner->id) ) {
                        $banner = Document::find($body->banner->id);
                    } else {
                        $banner = new Document();
                        foreach( $body->banner as $key => $value ) {
                            $banner->{$key} = $value;
                        }
                        $banner->save();
                    }
                    $document->banner()->associate($banner);
                }
                if (isset($body->images)) {
                    $imagesToAttach = array();
                    foreach($body->images as $docImage) {
                        if ( isset($docImage->id) ) {
                            $image = Document::find($docImage->id);
                        } else {
                            $image = new Document();
                            foreach( $docImage as $key => $value ) {
                                $image->{$key} = $value;
                            }
                            $image->save();

                        }
                        array_push($imagesToAttach, $image->id);
                    }
                }
            
                // detach
                $document->save();
                // new attach
                if (isset($imagesToAttach) && count($imagesToAttach) > 0) {
                    $document->images()->sync($imagesToAttach);
                }
                return response()->json($document);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
     /**
     * Operation allgalleryCategories
     *
     * Returns a list of documents..
     *
     *
     * @return Http response
     */
    public function allgalleryCategories()
    {
        try {
            $input = Request::all();

              if (!isset($input['limit'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
              }
              $limit = $input['limit'];

              if (!isset($input['page'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
              }
              $page = $input['page'];

              //not path params validation

              $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

              if ($limit == 0) {
                  $limit = 1;
              }

              $page = isset($input['page']) ? intval( $input['page'] ) : 1;

              if( $page == 0 ) {
                  $page = 1;
              }

              $skip = ($page-1) * $limit;

              $query = new GalleryCategory();
              if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                  $orArray = array();
                  $fields = ['title'];
                  // Put search in lowercase
                  $searchValue = strtolower($input['searchValue']);

                  // Extract search fields
                  if( isset($input['searchFields']) ) {
                      $fields = explode(',', $input['searchFields']);
                  }

                  // Iterate on fields to create the query
                  $query = $query->where(function($query) use($fields, $searchValue) {
                      foreach( $fields as $field ) {
                          $query->orWhere($field, 'like', "%" . $searchValue ."%");
                      }
                  });
              }
              // Get total elements in DB
              $total = $query->count();


              $totalPages = ceil( $total / $limit );

              if ($page > $totalPages) {
                  return response()->json([
                  'limit' => $limit,
                  'page' => $page,
                  'pages' => $totalPages,
                  'total' => $total,
                  'rows' => []
                  ]);
              }


              $sortBy = 'created_at';
              $sortOrder = 'asc';

              // Generate sort query
              if( isset($input['sortField']) ) {
                  $data = explode('=', $input['sortField']);
                  if( count($data) == 2 ) {
                      $sortBy = $data[0];
                      $sortOrder = $data[1];
                  }
              }

              $docs = $query->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
              
              return response()->json([
              'limit' => $limit,
              'page' => $page,
              'pages' => $totalPages,
              'total' => $total,
              'rows' => $docs
              ]);
      } catch (Exception $e) {
          return response()->json([
          'error' => 'Unexpected error',
          'stack' => json_encode(e)
          ], 500);
      }
    }
    /**
     * Operation uploadGallery
     *
     * Upload a file.
     *
     *
     * @return Http response
     */
    /**
     * Operation uploadGallery
     *
     * Upload a file.
     *
     *
     * @return Http response
     */
    public function uploadGallery()
    {
        $input = Request::all();
            
            
        //not path params validation
        if (!isset($input['file'])) {
            throw new \InvalidArgumentException('Missing the required parameter file');
        }
        $file = $input['file'];
        
        $path = Request::header('path');
        if (!isset($path)) {
            throw new \InvalidArgumentException('Missing the required parameter path in header');
        }
        
        
        
        if( substr($path, 0, 1 ) == '/') {
            $path = substr($path, 1 );
        }
        
        $params = null;
        
        
       
        $filename = Request::header('name');
        $categoryId = Request::header('categoryId');
        if( !isset($categoryId) ) {
            throw new \InvalidArgumentException('Missing the required parameter categoryId in header');
        }
        if( !isset($filename) ) {
            $filename = null;
        } else {
            $filename = Utils::cleanString($filename);
        }
        $type = Request::header('type');
        if( !isset($type) ) {
            $type = null;
        } else {
            $type = 'other';
        }
        $result = Utils::uploadFile(Request::file('file'), $path, $filename, $type, $params);
        if( $result == null ) {
            return response()->json([
            'success' => false
            ]);
        }
        $doc = Document::create($result);
        $gal = Gallery::create([
            'category_id' => $categoryId,
            'document_id' => $doc->id
        ]);
        return response()->json([
            'success' => true,
            'document' => $doc,
            'gallery' => $gal
        ]);
    }
}
