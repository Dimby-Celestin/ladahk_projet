<?php

/**
 * Ladakh swagger
 * Documentation for the ladakh platform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\Information;

class MiscApiImpl extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation allInformationCenters
     *
     * Returns a list of information centers..
     *
     *
     * @return Http response
     */
    public function allInformationCenters()
    {
        try {
            $input = Request::all();

              if (!isset($input['limit'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
              }
              $limit = $input['limit'];

              if (!isset($input['page'])) {
                  throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
              }
              $page = $input['page'];

              //not path params validation

              $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

              if ($limit == 0) {
                  $limit = 1;
              }

              $page = isset($input['page']) ? intval( $input['page'] ) : 1;

              if( $page == 0 ) {
                  $page = 1;
              }

              $skip = ($page-1) * $limit;

              $query = new Information();
              if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                  $orArray = array();
                  $fields = ['displayName'];
                  // Put search in lowercase
                  $searchValue = strtolower($input['searchValue']);

                  // Extract search fields
                  if( isset($input['searchFields']) ) {
                      $fields = explode(',', $input['searchFields']);
                  }

                  // Iterate on fields to create the query
                  $query = $query->where(function($query) use($fields, $searchValue) {
                      foreach( $fields as $field ) {
                          $query->orWhere($field, 'like', "%" . $searchValue ."%");
                      }
                  });
              }
              if (isset($input['subCategory']) && strlen($input['subCategory']) > 0 ) {
                  $query= $query->where('subCategory', $input['subCategory']);
              }
              if (isset($input['locationCategory']) && strlen($input['locationCategory']) > 0 ) {
                  $query= $query->where('locationCategory', $input['locationCategory']);
              }
              if (isset($input['locationSubCategory']) && strlen($input['locationSubCategory']) > 0 ) {
                  $query= $query->where('locationSubCategory', $input['locationSubCategory']);
              }
              if (isset($input['activityCategory']) && strlen($input['activityCategory']) > 0 ) {
                  $query= $query->where('activityCategory', $input['activityCategory']);
              }
     
              // Get total elements in DB
              $total = $query->count();


              $totalPages = ceil( $total / $limit );

              if ($page > $totalPages) {
                  return response()->json([
                  'limit' => $limit,
                  'page' => $page,
                  'pages' => $totalPages,
                  'total' => $total,
                  'rows' => []
                  ]);
              }


              $sortBy = 'created_at';
              $sortOrder = 'asc';

              // Generate sort query
              if( isset($input['sortField']) ) {
                  $data = explode('=', $input['sortField']);
                  if( count($data) == 2 ) {
                      $sortBy = $data[0];
                      $sortOrder = $data[1];
                  }
              }

              $docs = $query->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
              
              return response()->json([
              'limit' => $limit,
              'page' => $page,
              'pages' => $totalPages,
              'total' => $total,
              'rows' => $docs
              ]);
      } catch (Exception $e) {
          return response()->json([
          'error' => 'Unexpected error',
          'stack' => json_encode(e)
          ], 500);
      }}
}
