<?php

/**
* Pro Hero Documentation
* Pro Hero
*
* OpenAPI spec version: 0.0.1
*
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Http\Utils\Utils;
use App\Models\Document;
use App\Models\BusinessRequiredDocument;
use App\Models\BusinessTransfertRequiredDocument;
use Illuminate\Support\Facades\Log;

class UploadApiImpl extends UploadApi
{
    /**
    * Constructor
    */
    public function __construct()
    {
    }
    
    /**
    * Operation uploadFile
    *
    * Upload a file.
    *
    *
    * @return Http response
    */
    public function uploadFile()
    {
        $input = Request::all();
        
        //not path params validation
        if (!isset($input['file'])) {
            throw new \InvalidArgumentException('Missing the required parameter file');
        }
        
        $path = Request::header('path');
        if (!isset($path)) {
            throw new \InvalidArgumentException('Missing the required parameter path in header');
        }
        
        
        
        if( substr($path, 0, 1 ) == '/') {
            $path = substr($path, 1 );
        }
        
        $params = null;
        
        
        if( isset($input['max_dim']) || isset($input['generate_thumb']) || isset($input['max_thumb_dim']) ) {
            $params = [];
        }
        if( isset($input['max_dim']) ) {
            $params['max_dim'] = $input['max_dim'];
        }
        if( isset($input['generate_thumb']) ) {
            $params['generate_thumb'] = $input['generate_thumb'];
        }
        if( isset($input['max_thumb_dim']) ) {
            $params['max_thumb_dim'] = $input['max_thumb_dim'];
        }
        if( isset($input['max_thumb_dim']) ) {
            $params['max_thumb_dim'] = $input['max_thumb_dim'];
        }
        $filename = Request::header('name');
        if( !isset($filename) ) {
            $filename = null;
        } else {
            $filename = Utils::cleanString($filename);
        }

        if( $input['type']) {
            $type = $input['type'];
        } else {
            $type = 'other';
        }
        $result = Utils::uploadFile(Request::file('file'), $path, $filename, $type, $params);
        if( $result == null ) {
            return response()->json([
            'success' => false
            ]);
        }
        
        $doc = Document::create($result);
        return response()->json([
            'success' => true,
            'document' => $doc
        ]);
    }
      /**
     * Operation uploadAjaxFile
     *
     * Upload a file from ajax.
     *
     *
     * @return Http response
     */
    public function uploadAjaxFile()
    {
        $input = Request::all();
        //not path params validation
        $file_data = $input['file_data'];
        $currentUser = session('userData');
        if (!isset($currentUser)) {
            return response()->json([
                'error' => 'You are not connected'
            ]);
        }
        $requiredDocumentId = $input['requiredDocumentId'];
        $file_id = $input['fileId'];
        $filename = Utils::cleanString($file_id);
     
        $path = 'requiredDocument/' . $currentUser->id . '/'. $requiredDocumentId;
        $result = Utils::uploadFile( $file_data , $path, $filename, 'other', []);
        
        if( $result == null ) {
            return response()->json([
            'success' => false,
            'error' => 'error on uploading file'
            ]);
        }
       
        $result['requiredDocumentId'] = $requiredDocumentId ;
        $result['businessId'] = $currentUser->id ;
        if (isset($input['transfertId'])) {
            $transfertId = $input['transfertId'];
            $result['transfertId'] = $transfertId;
            $doc = BusinessTransfertRequiredDocument::where('requiredDocumentId', $requiredDocumentId)
            ->where('businessId',  $currentUser->id)->first();
            if (isset($doc) && isset($doc->id)) {
                $path = public_path(). '/'. $doc->path;
                unlink($path);
                // update
                unset($result['original_filename']);
                unset($result['type']);
                foreach( $result as $key => $value ) {
                        $doc->{$key} = $value;
                }
                $doc->save();
            } else {
                $doc = BusinessTransfertRequiredDocument::create($result);
            }
        } else {
             // check if file already exists
            $doc = BusinessRequiredDocument::where('requiredDocumentId', $requiredDocumentId)
            ->where('businessId',  $currentUser->id)->first();
            if (isset($doc) && isset($doc->id)) {
                $path = public_path(). '/'. $doc->path;
                unlink($path);
                // update
                unset($result['original_filename']);
                unset($result['type']);
                foreach( $result as $key => $value ) {
                        $doc->{$key} = $value;
                }
                $doc->save();
            } else {
                // create
                $doc = BusinessRequiredDocument::create($result);
            }
        }
        return response()->json([
            'success' => true,
            'document' => $doc
        ]);
        $data = [
            'error' => '',
            'initialPreview' => [],
            'initialPreviewConfig' => [],
            'initialPreviewThumbTags' => [],
            'appand' => false
        ];
    }
}