<?php

/**
*
* OpenAPI spec version: 0.0.1
*
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\User;
use App\Http\Utils\Utils;
use \DateTime;
use \DateInterval;

Use Log;

class UsersApiImpl extends UsersApi
{
    /**
    * Constructor
    */
    public function __construct()
    {
    }

    /**
    * Operation createUser
    *
    * Creates a user.
    *
    *
    * @return Http response
    */
    public function createUser()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);
            if( $decodedToken ) {
                //not path params validation
                $body = json_decode(Request::instance()->getContent());
                //unset($body->createdAt);
                unset($body->lastUpdatedAt);
                if (isset($body->createdAt)) {
                    $body->createdAt = new \Carbon\Carbon(preg_replace('/^([^.]*).*$/', '$1', $body->createdAt));
                }
                //Log::info('register account: '. Request::instance()->getContent());

                // check if this email already exists
                $user = User::where('email', $body->email)->first();

                if ($user) {
                    // User already exists, so returning error
                    return response()->json(['error' => 'Already exists'], 409);
                }
                if (!isset($body->isInNewSystem)) {
                    $body->isInNewSystem = false;
                }
                $user = new User((array) $body);

                if (isset($user->password) && strlen($user->password) > 0) {
                    $user->password = md5($user->password);
                }
                if (isset($body->id) && strlen($body->id) == 24) {
                    $user->id = new \MongoDB\BSON\ObjectID($body->id);
                }
                // Save new user
                $user->save();

                // Remove password
                unset($user->password);

                // Send Email
                //$emailContent = '<html><body>Bonjour ' . $user->firstname . ' ' . $user->lastname . ', <br/> Merci de votre inscription sur '. env('APP_NAME') .'.</body></html>';
                //$data = Utils::sendEmail($user->email, 'Inscription sur ' . env('APP_NAME'), $emailContent);

                // encode token

                return response()->json($user);
            } else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
    * Operation getUsers
    *
    * Returns a list of users..
    *
    *
    * @return Http response
    */
    public function getUsers()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin', 'employee', 'nurse']]);
            if( $decodedToken ) {
                $input = Request::all();

                //path params validation


                //not path params validation

                $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

                if ($limit == 0) {
                    $limit = 1;
                }

                $page = isset($input['page']) ? intval( $input['page'] ) : 1;

                if( $page == 0 ) {
                    $page = 1;
                }

                $skip = ($page-1) * $limit;


                if (isset($input['deleted']) && $input['deleted'] == "true") {
                    $query = User::withTrashed();
                } else {
                    $query = new User();
                }
                if( isset($input['email']) ) {
                    $query = $query->where('email', $input['email']);
                }
                //for employee
                if ($decodedToken->role == 'employee') {
                    //if user is employee, allow only for nurse listing
                    if ( $input['role'] != 'nurse') {
                        $unauthorized = Utils::unauthorizedMessage();
                        return response()->json($unauthorized->message, $unauthorized->status);
                    }
                    $query = $query->where('role', 'nurse');
                    $employee = User::find($decodedToken->userId);
                    if (!is_array($employee->nursesInCharge)) {
                        $arr = array();
                    }else {
                        $arr = $employee->nursesInCharge;
                    }
                    $query->whereIn('id', $arr);
                } else if ($decodedToken->role === 'nurse' ) {
                    $query = $query->where('id', $decodedToken->userId);
                }
                //for admin query
                if( isset($input['role']) ) {
                    $query = $query->where('role', $input['role']);

                    if( isset($input['unaffected'])) {
                        $query = $query->whereNull('archived');
                        // get all affected users
                        $employees = User::where('role', 'employee')->whereNull('archived')->get();
                        $alreadyAffected = array();
                        foreach($employees as $employee) {
                            $arr = (array) $employee->nursesInCharge;
                            $alreadyAffected = array_merge($arr, $alreadyAffected);
                        }
                        $query->whereNotIn('id', $alreadyAffected);
                    }
                }
                if (isset($input['archived'])) {
                    if ($input['archived'] == 'false') {
                        $query = $query->whereNull('archived');
                    } else if ($input['archived'] == 'true') {
                        $query = $query->where('archived', true);
                    }
                }
                if (isset($input['employeeid'])) {
                    $employee = User::find($input['employeeid']);
                    if (!is_array($employee->nursesInCharge)) {
                        $arr = array();
                    }else {
                        $arr = $employee->nursesInCharge;
                    }
                    $query->whereIn('id', $arr);
                }

                if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                    $orArray = array();
                    $fields = ['firstname', 'lastname', 'email'];
                    // Put search in lowercase
                    $searchValue = strtolower($input['searchValue']);

                    // Extract search fields
                    if( isset($input['searchFields']) ) {
                        $fields = explode(',', $input['searchFields']);
                    }

                    // Iterate on fields to create the query
                    $query = $query->where(function($query) use($fields, $searchValue) {
                        foreach( $fields as $field ) {
                            $query->orWhere($field, 'regexp', "/.*" . $searchValue ."/i");
                        }
                    });
                }
                if (isset($input['lastUpdated'])) {
                    $lastUpdated = new \DateTime($input['lastUpdated']);
                    $query = $query->where('lastUpdatedAt', '>=', $lastUpdated);
                }

                // Get total elements in DB
                $total = $query->count();


                $totalPages = ceil( $total / $limit );

                if ($page > $totalPages) {
                    return response()->json([
                    'limit' => $limit,
                    'page' => $page,
                    'pages' => $totalPages,
                    'total' => $total,
                    'rows' => []
                    ]);
                }


                $sortBy = 'created_at';
                $sortOrder = 'asc';

                // Generate sort query
                if( isset($input['sortField']) ) {
                    $data = explode('=', $input['sortField']);
                    if( count($data) == 2 ) {
                        $sortBy = $data[0];
                        $sortOrder = $data[1];
                    }
                }
                $users = $query->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();

                // Iterate through users to remove password
                foreach($users as $user) {
                    unset($user->password);
                }

                return response()->json([
                'limit' => $limit,
                'page' => $page,
                'pages' => $totalPages,
                'total' => $total,
                'rows' => $users
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
   
    /**
    * Operation deleteUser
    *
    * Deletes a User by ID.
    *
    * @param int $id User ID (required)
    *
    * @return Http response
    */
    public function deleteUser($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();

                $query = User::where('id', $id);
                $user = $query->first();

                if( !$user ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                $user->delete();

                return response()->json([
                'success' => true
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
    * Operation getUser
    *
    * Gets a User by ID.
    *
    * @param int $id User ID (required)
    *
    * @return Http response
    */
    public function getUser($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin', 'vendor', 'photographer', 'user','manager']
            ]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );

                $userIdToFind = $id;

                if ($decodedToken->role === 'vendor' || $decodedToken->role === 'photographer' || 
                $decodedToken->role === 'user'
                 || $userIdToFind == 'mine' || $userIdToFind == 'me') {
                    $userIdToFind = $decodedToken->userId;
                }
                $query = User::where('id', $userIdToFind);
                $user = $query->first();
                if( !$user ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
                if (( $userIdToFind == 'mine' || $userIdToFind == 'me') && $user->archived === true) {
                    return response()->json([
                        'error' => 'User deactivated'
                        ], 401);
                }
                if ($decodedToken->role === 'nurse') {
                    $employee = User::raw()->findOne(['nursesInCharge' => $userIdToFind ]);
                    if ($employee) {
                      $user->manager_phone = $employee->phone;
                    }
                }
                unset($user->password);

                return response()->json($user);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
    * Operation updateUser
    *
    * Updates a User by ID.
    *
    * @param string $id User ID (required)
    *
    * @return Http response
    */
    public function updateUser($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin', 'nurse', 'employee']]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );
                $toUpdate = $body;
                $userIdToFind = $id;
                if ($decodedToken->role != 'admin' || $userIdToFind == 'mine' || $userIdToFind == 'me') {
                    $userIdToFind = $decodedToken->userId;
                }
                unset($toUpdate->appointment); // force to remove updating appointment
                // Search in DB
                $query = User::where('id', $userIdToFind);
                $user = $query->first();

                if( !$user ) { // Stop request if the user has not been found
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                unset($toUpdate->createdAt);
                unset($toUpdate->lastUpdatedAt);

                // Update fields
                // Save password

                // Log::debug(print_r($toUpdate, true));
                $oldListOfNurses = $user->nursesInCharge;

                if( !isset($oldListOfNurses) ) {
                    $oldListOfNurses = array();
                }

                foreach( $toUpdate as $key => $value ) {
                    if( $key == 'password') {
                        // Log::debug('Updating password ' . $value );
                        if( strlen($value) > 0 ) {
                            $value = md5($value);
                            $user->{$key} = $value;
                        }

                        // Log::debug('Updating password after encryption ' . $value );
                    }
                    else {
                        $user->{$key} = $value;
                    }
                }

                $user->save();

                unset($user->password);

                if( !isset($body->nursesInCharge) ) {
                    $nursesInCharge = [];
                } else {
                  $nursesInCharge = $body->nursesInCharge;
                }

                $diff = array_values(array_diff($oldListOfNurses, $nursesInCharge));
                if( isset($diff) ) {
                    for($i = 0; $i < count($diff); $i++ ) {
                        $u = User::find($diff[$i]);
                        $u->unset('employeeid');
                        $u->save();
                    }
                }

                // Update nurse with employeeid
                for($i = 0; $i < count($nursesInCharge); $i++ ) {
                    $u = User::find($nursesInCharge[$i]);
                    $u->employeeid = $user->id;
                    $u->save();
                }

                return response()->json($user);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
   
}
