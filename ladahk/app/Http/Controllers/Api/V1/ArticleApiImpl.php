<?php

/**
 * Ladakh swagger
 * Documentation for the ladakh platform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers\Api\V1;

use Illuminate\Support\Facades\Request;
use App\Models\Article;
use App\Models\Document;
use App\Http\Utils\Utils;
use App\Models\Category;
use Illuminate\Support\Facades\DB;

class ArticleApiImpl extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation allArticles
     *
     * Returns a list of documents..
     *
     *
     * @return Http response
     */
    public function allArticles()
    {
        try {
              $input = Request::all();

                if (!isset($input['limit'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $limit when calling getDocuments');
                }
                $limit = $input['limit'];

                if (!isset($input['page'])) {
                    throw new \InvalidArgumentException('Missing the required parameter $page when calling getDocuments');
                }
                $page = $input['page'];

                //not path params validation

                $limit = isset($input['limit']) ? intval( $input['limit'] ): 10;

                if ($limit == 0) {
                    $limit = 1;
                }

                $page = isset($input['page']) ? intval( $input['page'] ) : 1;

                if( $page == 0 ) {
                    $page = 1;
                }

                $skip = ($page-1) * $limit;

                $query = new Article();
                if( isset($input['searchValue']) && strlen($input['searchValue']) > 0  ) {
                    $orArray = array();
                    $fields = ['title'];
                    // Put search in lowercase
                    $searchValue = strtolower($input['searchValue']);

                    // Extract search fields
                    if( isset($input['searchFields']) ) {
                        $fields = explode(',', $input['searchFields']);
                    }

                    // Iterate on fields to create the query
                    $query = $query->where(function($query) use($fields, $searchValue) {
                        foreach( $fields as $field ) {
                            $query->orWhere($field, 'like', "%" . $searchValue ."%");
                        }
                    });
                }
                if( isset($input['must_to_do']) && strlen($input['must_to_do']) > 0  ) {
                    $query->where('must_to_do', true);
                }
                // Get total elements in DB
                $total = $query->count();


                $totalPages = ceil( $total / $limit );

                if ($page > $totalPages) {
                    return response()->json([
                    'limit' => $limit,
                    'page' => $page,
                    'pages' => $totalPages,
                    'total' => $total,
                    'rows' => []
                    ]);
                }


                $sortBy = 'created_at';
                $sortOrder = 'asc';

                // Generate sort query
                if( isset($input['sortField']) ) {
                    $data = explode('=', $input['sortField']);
                    if( count($data) == 2 ) {
                        $sortBy = $data[0];
                        $sortOrder = $data[1];
                    }
                }

                $articles = $query->with('thumbnail', 'categories', 'banner')->orderBy($sortBy, $sortOrder)->skip($skip)->take($limit)->get();
                if (isset($input['excerpt'])) {
                    foreach($articles as $article) {
                        $article->content = $article->excerpt(150);
                    }
                }
                
                return response()->json([
                'limit' => $limit,
                'page' => $page,
                'pages' => $totalPages,
                'total' => $total,
                'rows' => $articles
                ]);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation createArticle
     *
     * Creates a document.
     *
     *
     * @return Http response
     */
    public function createArticle()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => array('admin'),
            ]);
            if( $decodedToken ) {
                $body = json_decode( Request::instance()->getContent() );

                $article = new Article();
                foreach( $body as $key => $value ) {
                    if ($key !== 'thumbnail' && $key !== 'images' && $key !== 'categories' && $key !== 'banner') {
                        $article->{$key} = $value;
                    }
                }
                $article->posted_at = \Carbon\Carbon::now()->format('Y-m-d H:i:s');
                $article->author_id = $decodedToken->userId;
                if (isset($body->images)) {
                    $imagesToAttach = array();
                    foreach($body->images as $docImage) {
                        if ( isset($docImage->id) ) {
                            $image = Document::find($docImage->id);
                        } else {
                            $image = new Document();
                            foreach( $docImage as $key => $value ) {
                                $image->{$key} = $value;
                            }
                            $image->save();

                        }
                        array_push($imagesToAttach, $image->id);
                    }
                }
                if (isset($body->categories)) {
                    $categoriesToAttach = array();
                    foreach($body->categories as $docCat) {
                        if ( isset($docCat->id) ) {
                            $cat = Category::find($docCat->id);
                        } else {
                            $cat = new Category();
                            foreach( $docCat as $key => $value ) {
                                $cat->{$key} = $value;
                            }
                            $cat->save();
                        }
                        array_push($categoriesToAttach, $cat->id);
                    }
                }
                if (isset($body->thumbnail)) {
                    if ( isset($body->thumbnail->id) ) {
                        $thumbnail = Document::find($body->thumbnail->id);
                    } else {
                        $thumbnail = new Document();
                        foreach( $body->thumbnail as $key => $value ) {
                            $thumbnail->{$key} = $value;
                        }
                        $thumbnail->save();
                    }
                    $article->thumbnail()->associate($thumbnail);
                }
                if (isset($body->banner)) {
                    if ( isset($body->banner->id) ) {
                        $banner = Document::find($body->banner->id);
                    } else {
                        $banner = new Document();
                        foreach( $body->banner as $key => $value ) {
                            $banner->{$key} = $value;
                        }
                        $banner->save();
                    }
                    $article->banner()->associate($banner);
                }
                $article->save();
                if (isset($categoriesToAttach) && count($categoriesToAttach) > 0) {
                    $article->categories()->attach($categoriesToAttach);
                }
                if (isset($imagesToAttach) && count($imagesToAttach) > 0) {
                    $article->images()->attach($imagesToAttach);
                }
              
                
               
                // $document = Document::create((array)$body);
                return response()->json($article);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation deleteArticle
     *
     * Deletes a user by ID.
     *
     * @param string $id Article ID (required)
     *
     * @return Http response
     */
    public function deleteArticle($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();

                $document = Article::find($id);

                if( !$document ) {
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }

                $document->delete();

                return response()->json([
                'success' => true
                ]);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation getArticle
     *
     * Gets a doc by ID.
     *
     * @param string $id Article ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function getArticle($id)
    {
        try {
            $query = Article::where('id', $id)->with('thumbnail','categories', 'banner', 'images');
            $document = $query->first();

            if( !$document ) {
                $notFound = Utils::notFoundMessage();
                return response()->json($notFound->message, $notFound->status);
            }

            return response()->json($document);
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation updateArticle
     *
     * Updates a Article by ID.
     *
     * @param string $id Article ID. If called from the application, can be \&quot;me\&quot;. (required)
     *
     * @return Http response
     */
    public function updateArticle($id)
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => ['admin']]);

            if( $decodedToken ) {
                $input = Request::all();
                $body = json_decode( Request::instance()->getContent() );

                // Search in DB
                $document = Article::find($id);

                if( !$document ) { // Stop request if the user has not been found
                    $notFound = Utils::notFoundMessage();
                    return response()->json($notFound->message, $notFound->status);
                }
                unset($body->created_at);
                unset($body->updated_at);

                foreach( $body as $key => $value ) {
                    if ($key !== 'thumbnail' && $key !== 'images' && $key !== 'categories' && $key !== 'banner') {
                        $document->{$key} = $value;
                    }
                }
                if (isset($body->thumbnail)) {
                    if ( isset($body->thumbnail->id) ) {
                        $thumbnail = Document::find($body->thumbnail->id);
                    } else {
                        $thumbnail = new Document();
                        foreach( $body->thumbnail as $key => $value ) {
                            $thumbnail->{$key} = $value;
                        }
                        $thumbnail->save();
                    }
                    $document->thumbnail()->associate($thumbnail);
                }
                if (isset($body->banner)) {
                    if ( isset($body->banner->id) ) {
                        $banner = Document::find($body->banner->id);
                    } else {
                        $banner = new Document();
                        foreach( $body->banner as $key => $value ) {
                            $banner->{$key} = $value;
                        }
                        $banner->save();
                    }
                    $document->banner()->associate($banner);
                }
                if (isset($body->images)) {
                    $imagesToAttach = array();
                    foreach($body->images as $docImage) {
                        if ( isset($docImage->id) ) {
                            $image = Document::find($docImage->id);
                        } else {
                            $image = new Document();
                            foreach( $docImage as $key => $value ) {
                                $image->{$key} = $value;
                            }
                            $image->save();

                        }
                        array_push($imagesToAttach, $image->id);
                    }
                }
                if (isset($body->categories)) {

                    $categoriesToAttach = array();
                    foreach($body->categories as $docCat) {
                        if ( isset($docCat->id) ) {
                            $cat = Category::find($docCat->id);
                        } else {
                            $cat = new Category();
                            foreach( $docCat as $key => $value ) {
                                $cat->{$key} = $value;
                            }
                            $cat->save();
                        }
                        array_push($categoriesToAttach, $cat->id);
                    }
                }
                // detach
                $document->save();
                // new attach
                if (isset($categoriesToAttach) && count($categoriesToAttach) > 0) {
                    $document->categories()->sync($categoriesToAttach);
                }
                if (isset($imagesToAttach) && count($imagesToAttach) > 0) {
                    $document->images()->sync($imagesToAttach);
                }
                return response()->json($document);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
    /**
     * Operation reorderListArticle
     *
     * Reorder List Article..
     *
     *
     * @return Http response
     */
    public function reorderListArticle()
    {
        try {
            $decodedToken = Utils::isAuthorized((array)[
            'role' => array('admin'),
            ]);
            if( $decodedToken ) {
                $body = json_decode( Request::instance()->getContent() );

                foreach( $body as $key => $value ) {
                    DB::table('articles')
                    ->where('id', $key)
                    ->update(['order' => $value]);
                }
               
                return response()->json(['success' => 'ok']);
            }
            else {
                $unauthorized = Utils::unauthorizedMessage();
                return response()->json($unauthorized->message, $unauthorized->status);
            }
        } catch (Exception $e) {
            return response()->json([
            'error' => 'Unexpected error',
            'stack' => json_encode(e)
            ], 500);
        }
    }
}
