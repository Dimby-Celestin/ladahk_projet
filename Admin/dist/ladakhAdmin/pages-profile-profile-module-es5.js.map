{"version":3,"sources":["webpack:///src/app/pages/profile/profile-routing.module.ts","webpack:///src/app/pages/profile/profile.component.ts","webpack:///src/app/pages/profile/profile.component.html","webpack:///src/app/pages/profile/profile.module.ts","webpack:///src/app/shared/providers/form-helper.service.ts","webpack:///src/app/shared/providers/toaster.service.ts","webpack:///src/app/shared/services/base.service.ts","webpack:///src/app/shared/services/user.service.ts"],"names":["routes","path","component","ProfileRoutingModule","forChild","imports","exports","ProfileComponent","fb","_utils","_toasterService","_formHelperService","_sessionService","userService","data","isLoading","setTimeout","form","group","password","required","minLength","repeatPassword","validators","passwordMatchValidator","e","valid","error","validateAllFormFields","p","value","user","updateProfile","toPromise","success","reset","field","isFieldValid","back","selector","templateUrl","styleUrls","ProfileModule","declarations","FormHelperService","get","touched","Object","keys","controls","forEach","control","markAsTouched","onlySelf","notMatching","providedIn","ToasterService","showNotification","warn","info","message","type","from","align","$","notify","icon","timer","z_index","placement","BaseService","httpService","TCreator","pathPlural","pathSingular","totalCount","totalCount$","asObservable","id","pipe","x","page","perPage","query","order","select","isAscendant","key","$top","toString","$query","limit","next","total","rows","map","u","arg","item","post","prepareForSending","put","UserService","_httpService","patch"],"mappings":"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","file":"pages-profile-profile-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProfileComponent } from './profile.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfileComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProfileRoutingModule {}\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl\n} from \"@angular/forms\";\nimport { UtilsService } from \"../../shared/providers/utils.service\";\nimport { ToasterService } from \"../../shared/providers/toaster.service\";\nimport { FormHelperService } from \"../../shared/providers/form-helper.service\";\nimport { SessionService } from \"../../shared/providers/session.service\";\nimport { User } from '../../shared/models/user.model';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.component.html\",\n  styleUrls: [\"./profile.component.scss\"]\n})\nexport class ProfileComponent implements OnInit {\n  isLoading: boolean;\n  data: User = new User();\n  form: FormGroup;\n  id: string;\n  constructor(\n    private fb: FormBuilder,\n    private _utils: UtilsService,\n    private _toasterService: ToasterService,\n    private _formHelperService: FormHelperService,\n    private _sessionService: SessionService,\n    private userService: UserService\n  ) {\n    this.isLoading = false;\n  }\n  async ngOnInit() {\n    try {\n    setTimeout(() => {\n      this.form = this.fb.group({\n        password: [\"\", [Validators.required,Validators.minLength(6)]],\n        repeatPassword: ['', Validators.required]\n      }, {validators: this._formHelperService.passwordMatchValidator});\n    });\n    } catch (e) {}\n  }\n\n  /**\n   *  submit the form\n   *  @param model form's values\n   *  @param isValid form's validatoin\n   */\n  async submit() {\n    if (!this.form.valid) {\n      this._toasterService.error(\"Veuillez vérifier le formulaire\");\n      this._formHelperService.validateAllFormFields(this.form);\n      return;\n    }\n    try {\n      const p = {...this.form.value};\n      this.isLoading = true;\n      const user = new User(p);\n      await this.userService.updateProfile(user).toPromise();\n      this._toasterService.success('Votre mot de passe est maintenat à jour');\n      this.isLoading = false;\n      this.form.reset();\n    } catch (e) {\n      this.isLoading = false;\n    }\n  }\n  isFieldValid(field: any) {\n    return this._formHelperService.isFieldValid(this.form, field);\n  }\n  displayFieldCss(field: string) {\n    return {\n      \"has-error\": this.isFieldValid(field),\n      \"has-feedback\": this.isFieldValid(field)\n    };\n  }\n  reset() {\n    this.form.reset();\n  }\n  goBack() {\n    this._utils.back();\n  }\n\n}\n","<div class=\"main-content\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"row\">\n            <div class=\"col-md-12 back-btn-container\">\n              <h4 class=\"title\">Votre profil</h4>\n            </div>\n  \n            <div class=\"col-md-12\">\n              <button form=\"form\" [disabled]=\"isLoading\" class=\"btn btn-fill btn-success pull-right\" type=\"submit\">\n                Enregistrer\n              </button>\n            </div>\n          </div>\n          <div class=\"card\">\n            contenu\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  ","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ProfileComponent } from './profile.component';\nimport { ProfileRoutingModule } from './profile-routing.module';\n\n@NgModule({\n  declarations: [ProfileComponent],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxPaginationModule\n  ]\n})\nexport class ProfileModule { }","import { FormGroup, FormControl } from '@angular/forms';\nimport { Injectable } from '@angular/core';\n\n/**\n * Form Helper\n *\n * @export\n * @class FormHelperService\n */\n@Injectable({providedIn: 'root'})\nexport class FormHelperService {\n\n  /**\n   * Validate a field in formGroup\n   *\n   * @param {FormGroup} form FormGroup instance\n   * @param {string} field Field to validate\n   * @returns\n   * @memberof FormHelperService\n   */\n  public isFieldValid(form: FormGroup, field: any) {\n    return !form.get(field).valid && form.get(field).touched;\n  }\n\n  /**\n   * Validate form for each item in formGroup\n   *\n   * @param {FormGroup} form FormGroup instance\n   * @memberof FormHelperService\n   */\n  public validateAllFormFields(form: FormGroup) {\n    Object.keys(form.controls).forEach(field => {\n      const control = form.get(field);\n      if (control instanceof FormControl) {\n        control.markAsTouched({ onlySelf: true });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n\n  /**\n   * Validator for password match\n   *\n   * @private\n   * @param {FormGroup} form FormGroup instance\n   * @returns {*}\n   * @memberof SettingProfilePasswordComponent\n   */\n  public passwordMatchValidator(form: FormGroup): any {\n    if (form) {\n      if (form.get('password').value !== form.get('repeatPassword').value) {\n        return { notMatching: true };\n      }\n    }\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\ndeclare var $: any;\n\n@Injectable({ providedIn: 'root' })\nexport class ToasterService {\n  constructor() {}\n\n  error = (error?: string) => {\n    if (!error) {\n      error = 'Une erreur s\\'est produite pendant le traitement';\n    }\n    this.showNotification(error, 'danger');\n  };\n  success = (success?: string) => {\n    if (!success) {\n      success = 'Traitement réussi avec succès';\n    }\n    this.showNotification(success, 'success');\n  };\n  warning(warn: string) {\n    this.showNotification(warn, 'warning');\n  }\n  info(info: string) {\n    this.showNotification(info, 'info');\n  }\n\n  showNotification(message, type?, from?, align?) {\n    if (!type) {\n      type = 'info';\n    }\n    if (!from) {\n      from = 'top';\n    }\n    if (!align) {\n      align = 'right';\n    }\n    $.notify(\n      {\n        icon: 'notifications',\n        message: message\n      },\n      {\n        type: type,\n        timer: 1500,\n        z_index: 30000,\n        placement: {\n          from: from,\n          align: align\n        }\n      }\n    );\n  }\n}\n","import { HttpService } from \"../providers/http.service\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { BaseModelInterface, BaseModel } from \"../models/base.model\";\n\n/**\n * Abstract BaseSevice Class\n *\n * @export\n * @abstract\n * @class BaseService\n * @template T\n */\nexport abstract class BaseService<T extends BaseModelInterface> {\n  /**\n   *  Create subjet of items total count\n   *\n   * @type {BehaviorSubject<number>}\n   * @memberof BaseService\n   */\n  public totalCount: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n  /**\n   *  Create observable of items total count\n   *\n   * @memberof BaseService\n   */\n  public totalCount$: any = this.totalCount.asObservable();\n\n  constructor(\n    protected httpService: HttpService,\n    protected TCreator: { new (arg?: any): T },\n    protected pathPlural: string,\n    protected pathSingular: string\n  ) {}\n\n  /**\n   * Get one item from API\n   *\n   * @param {string} id\n   * @returns {Observable<T>}\n   * @memberof BaseService\n   */\n  public load(id: string): Observable<T> {\n    return this.httpService\n      .get(`${this.pathSingular}/${id}`)\n      .pipe(map(x => new this.TCreator(x)));\n  }\n\n  /**\n   * Get items from API\n   *\n   * @param {number} [page=0]\n   * @param {number} [perPage=10]\n   * @param {*} [query]\n   * @param {string} [order]\n   * @param {string} [select]\n   * @param {boolean} [isAscendant]\n   * @returns {Observable<T[]>}\n   * @memberof BaseService\n   */\n  public list(\n    page: number = 1,\n    perPage: number = 10,\n    query?: any,\n    order?: string,\n    select?: string,\n    isAscendant?: boolean,\n    key?: string\n  ): Observable<T[]> {\n    const $top = perPage.toString();\n    let $query: any = { page, limit: $top };\n    if (query) {\n      $query = {...$query, ...query};\n    }\n    if (order) {\n      $query[\"_sort\"] = order;\n    }\n    if (select) {\n      $query[\"$select\"] = select;\n    }\n    return this.httpService.get(`${this.pathPlural}`, $query).pipe(\n      map(x => {\n        let data = x;\n        if (key && key !== '') {\n          data = x[key];\n        }\n        this.totalCount.next(x.total);\n        return data.rows.map((u: T) => {\n          return new this.TCreator(u);\n        });\n      })\n    );\n  }\n\n  count() {\n    return this.httpService.get(`${this.pathPlural}/count`).pipe(\n      map(x => {\n        this.totalCount.next(x);\n      })\n    );\n  }\n  countFind(arg?: any) {\n    if (!arg) {\n      arg = {};\n    }\n    return this.httpService.get(`${this.pathPlural}/count`, arg);\n  }\n\n  /**\n   * Add item from API\n   *\n   * @param {T} item\n   * @returns {Observable<T>}\n   * @memberof BaseService\n   */\n  public add(item: T): Observable<T> {\n    return this.httpService.post(`${this.pathPlural}`, item.prepareForSending());\n  }\n\n  /**\n   * Update item from API\n   *\n   * @param {T} item\n   * @returns {Observable<T>}\n   * @memberof BaseService\n   */\n  public update(item: T): Observable<T> {\n    return this.httpService.put(\n      `${this.pathSingular}/${item.id}`,\n      item.prepareForSending()\n    );\n  }\n\n  /**\n   * Delete item from API\n   *\n   * @param {T} item\n   * @returns {Observable<T>}\n   * @memberof BaseService\n   */\n  public delete(item: T): Observable<T> {\n    return this.httpService.delete(`${this.pathSingular}/${item.id}`);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { BaseService } from \"./base.service\";\nimport { User } from \"../models/user.model\";\nimport { HttpService } from \"../providers/http.service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class UserService extends BaseService<User> {\n  constructor(protected _httpService: HttpService) {\n    super(_httpService, User, 'users', 'user');\n  }\n  updateProfile(item: User): Observable<User> {\n    return this.httpService.patch(\n      `updateProfile`,\n      item.prepareForSending()\n    );\n  }\n}\n"]}